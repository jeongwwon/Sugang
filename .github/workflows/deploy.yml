name: Deploy to AWS with Terraform

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: backend-portfolio

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 소스코드 가져오기
      - uses: actions/checkout@v2

      # JDK 설정 (Spring Boot 빌드용)
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 (테스트는 스킵)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Docker 빌드 & 푸시
      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=${{ github.sha }}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Terraform 실행
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: infra

      - name: Terraform Apply
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: terraform apply -auto-approve -input=false \
          -var "image_tag=${IMAGE_TAG}" \
          -var "ecr_registry=${ECR_REGISTRY}" \
          -var "ecr_repository=${{ env.ECR_REPOSITORY }}"
        working-directory: infra
